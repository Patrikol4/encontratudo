// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  email            String             @unique
  password         Password[]
  notes            Note[]
  cidades          Cidades[]
  anuncios         Anuncio[]
  categoria        Categoria[]
  empresa          Empresa[]
  CategoriaUsuario CategoriaUsuario[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Password {
  hash String @id @map("_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId
}

model Note {
  id    String @id @default(cuid()) @map("_id")
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId
}

model Cidades {
  id         String @id @default(cuid()) @map("_id")
  nomeCidade String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId
}

model Anuncio {
  id          String   @id @default(cuid()) @map("_id")
  nomeAnuncio String
  empresa     String   @unique @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
}

model Categoria {
  id                 String @id @default(cuid()) @map("_id")
  nomeCategoria      String
  descricaoCategoria String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
}

model Empresa {
  id               String @id @default(cuid()) @map("_id")
  nomeEmpresa      String
  enderecoEmpresa  String // depois será substituído por : lista de endereços da API dos correios
  cidadeEmpresa    String
  negocioEmpresa   String
  descricaoEmpresa String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
}

model TiposNegocios {
  id                   String @id @default(cuid()) @map("_id")
  tipoNegocio          String
  descricaoTipoNegocio String
}

model CategoriaUsuario {
  id                String @id @default(cuid()) @map("_id")
  nomeCategoriaUser String
  descricaoCatUser  String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
}
